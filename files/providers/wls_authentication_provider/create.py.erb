# check the domain else we need to skip this (done in wls_access.rb)
real_domain='<%= domain %>'

name                      = '<%= authentication_provider_name %>'
control_flag              = '<%= control_flag %>'
providerclassname         = '<%= providerclassname %>'
attributes                = '<%= attributes %>'
attributesvalues          = '<%= attributesvalues %>'
order                     = '<%= order %>'

edit()
startEdit()

try:

    cd('/')
    realmName  = cmo.getSecurityConfiguration().getDefaultRealm()
    path = getPath(realmName)
    cd(path)

    cmo.createAuthenticationProvider(name, providerclassname)

    cd ('AuthenticationProviders/' + name)

    pwd()
    ls()

    if control_flag:
      print name + ": control_flag is set: >" + control_flag + "<"
      cmo.setControlFlag(control_flag)

    if attributes:
      print name + ": attributes is set: >" + attributes + "<"
      if attributesvalues:
          print name + " attributesvalues is set: >" + attributesvalues + "<"
          properties=String(attributes).split(";")
          values=String(attributesvalues).split(";")

          numbers  = ['Port','CacheTTL','CacheSize','MaxGroupMembershipSearchLevel']
          booleans = ['KeepAliveEnabled','UseRetrievedUserNameAsPrincipal','IgnoreDuplicateMembership','DigestReplayDetectionEnabled','UseDefaultUserNameMapper','SSLEnabled']
          lists =    ['ActiveTypes']

          i = 0
          for property in properties:

            print "set property " + property + " value "+ values[i]
            if property in numbers:
              print "is a int"
              set(property,int(values[i]))

            elif property in booleans:
              print "is a boolean"
              if values[i] == '1' or values[i] == 1:
                print "True"
                try:
                  set(property,true)
                except:
                  print "failed to set boolean true, trying string"
                  try:
                    set(property, 'true')
                  except:
                    raise
              else:
                try:
                  set(property,false)
                except:
                  print "failed to set boolean false, trying string"
                  try:
                    set(property, 'false')
                  except:
                    raise

            elif property in lists:
              print "is a list"

              list_values=String(values[i]).split("::")
              set(property,jarray.array(list_values, String))

            else:
              print "is a string"
              set(property,values[i])

            i = i + 1

    # Authentication Provider Ordering
    if order:
        order_val = int(order)
        cd('/'+path)
        ap = get('AuthenticationProviders')

        if ap[order_val].getKeyProperty('Name') != realmName.getName()+name:
            # Find the current index
            old_index = len(ap)-1
            if order_val > old_index:
                raise Exception("ERROR - Order Value %d is higher than the quantity of Authentication Providers configured. Cannot order." % order_val)

            for provider in ap[::-1]:
                if provider.getKeyProperty('Name') == realmName.getName()+name:
                    print "Ordering %s to position %d" % (name, order_val)
                    ap.insert(order_val, ap.pop(old_index))
                    break

                old_index = old_index - 1

            # Apply the new order
            set('AuthenticationProviders', ap)



    print "done"
    save()
    #
    #   sort auth providers
    #
    cd('/SecurityConfiguration/' + real_domain + '/Realms/' + realmName.getName())
    authprovs = cmo.getAuthenticationProviders()

    ap_array = []

    for ap in authprovs:
      ap_name = ap.getName()
      if ap_name == name:
        ap_array.append(ObjectName('Security:Name=' + realmName.getName() + ap_name))

    for ap in authprovs:
      ap_name = ap.getName()
      if ap_name != name:
        ap_array.append(ObjectName('Security:Name=' + realmName.getName() + ap_name))

    set('AuthenticationProviders', jarray.array(ap_array, ObjectName))

    save()
    activate()
    print "~~~~COMMAND SUCCESFULL~~~~"

except:
    print "Unexpected error:", sys.exc_info()[0]
    undo('true','y')
    stopEdit('y')
    print "~~~~COMMAND FAILED~~~~"
    raise
