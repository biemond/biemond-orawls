
cd("/")
m = ls('/Servers',returnMap='true')

f = open_file("name;listenaddress;listenport;logintimeout;ssllistenport;sslenabled;sslhostnameverificationignored;sslhostnameverifier;two_way_ssl;client_certificate_enforced;useservercerts;machine;logfilename;log_file_min_size;log_filecount;log_rotate_logon_startup;log_rotationtype;log_rotationdir;log_number_of_files_limited;tunnelingenabled;log_http_filename;log_http_format;log_http_format_type;log_datasource_filename;classpath;arguments;jsseenabled;domain;custom_identity;custom_identity_keystore_filename;trust_keystore_file;custom_identity_alias;default_file_store;max_message_size;log_redirect_stderr_to_server;log_redirect_stdout_to_server;restart_max;log_http_file_count;log_http_number_of_files_limited;bea_home;weblogic_plugin_enabled;listenportenabled;auto_restart;autokillwfail;server_parameters;frontendhost;frontendhttpport;frontendhttpsport;log_date_pattern;log_stdout_severity;log_log_file_severity;failure_action", tmp_script)
for token in m:
  print '___'+token+'___'
  cd('/Servers/'+token)
  listenAddress     = get_attribute_value('ListenAddress')
  listenPort        = get_attribute_value('ListenPort')
  listenPortEnabled = get_attribute_value('ListenPortEnabled')
  max_message_size  = get_attribute_value('MaxMessageSize')
  tunnelingenabled  = get_attribute_value('TunnelingEnabled')
  logintimeout	    = get_attribute_value('LoginTimeoutMillis')
  restart_max       = get_attribute_value('RestartMax')

  auto_restart      = get_attribute_value('AutoRestart')
  autokillwfail     = get_attribute_value('AutoKillIfFailed')

  # exception empty return None instead of ''
  server_parameters = str(get('Notes'))
  if get("KeyStores") == "CustomIdentityAndCustomTrust":
    custom_identity = '1'
  else:
    custom_identity = '0'

  custom_identity_keystore_filename = get_attribute_value("CustomIdentityKeyStoreFileName")
  trust_keystore_file               = get_attribute_value("CustomTrustKeyStoreFileName")
  weblogic_plugin_enabled           = get_attribute_value('WeblogicPluginEnabled')

  cd('/Servers/'+token+'/SSL/'+token)
  sslListenPort                     = get_attribute_value('ListenPort')
  sslEnabled                        = get_attribute_value('Enabled')
  sslHostnameVerificationIgnored    = get_attribute_value('HostnameVerificationIgnored')
  sslhostnameverifier               = get_attribute_value('HostnameVerifier')
  two_way_ssl                       = get_attribute_value('TwoWaySSLEnabled')
  client_certificate_enforced       = get_attribute_value('ClientCertificateEnforced')
  jsseEnabled                       = get_attribute_value('JSSEEnabled')

  useservercerts                    = get_attribute_value('UseServerCerts')
  custom_identity_alias             = get_attribute_value("ServerPrivateKeyAlias")

  cd('/Servers/'+token+'/ServerStart/'+token)
  bea_home      = get_attribute_value('BeaHome')
  classpath     = get_attribute_value('ClassPath')
  arguments     = get_attribute_value('Arguments')

  cd('/Servers/'+token+'/WebServer/'+token)
  frontendhost      = get_attribute_value('FrontendHost')
  frontendhttpport  = get_attribute_value('FrontendHTTPPort')
  frontendhttpsport = get_attribute_value('FrontendHTTPSPort')

  cd('/Servers/'+token+'/Log/'+token)
  logfilename                   = get_attribute_value('FileName')
  log_rotationtype              = get_attribute_value('RotationType')
  log_rotationdir               = get_attribute_value('LogFileRotationDir')
  log_rotate_logon_startup      = get_attribute_value('RotateLogOnStartup')
  log_number_of_files_limited   = get_attribute_value('NumberOfFilesLimited')
  log_filecount                 = get_attribute_value('FileCount')
  log_file_min_size             = get_attribute_value('FileMinSize')
  log_redirect_stderr_to_server = get_attribute_value('RedirectStderrToServerLogEnabled')
  log_redirect_stdout_to_server = get_attribute_value('RedirectStdoutToServerLogEnabled')
  log_date_pattern              = get_attribute_value('DateFormatPattern')
  log_stdout_severity           = get_attribute_value('StdoutSeverity')
  log_log_file_severity         = get_attribute_value('LogFileSeverity')

  cd('/Servers/'+token+'/WebServer/'+token+'/WebServerLog/'+token)
  log_http_filename                = get_attribute_value('FileName')
  log_http_format                  = get_attribute_value('ELFFields')
  log_http_format_type             = get_attribute_value('LogFileFormat')
  log_http_file_count              = get_attribute_value('FileCount')
  log_http_number_of_files_limited = get_attribute_value('NumberOfFilesLimited')
  print log_http_number_of_files_limited

  cd('/Servers/'+token+'/DataSource/'+token+'/DataSourceLogFile/'+token)
  log_datasource_filename          = get_attribute_value('FileName')

  cd('/Servers/' + token + '/OverloadProtection/' + token)
  failure_action = get_attribute_value('FailureAction')

  cd('/Servers/'+token+'/DefaultFileStore/'+token)
  default_file_store = get_attribute_value('Directory')

  n = ls('/Servers/'+token+'/Machine')
  machine = ''
  for token2 in n.split("drw-"):
      token2=token2.strip().lstrip().rstrip()
      if token2:
         machine = token2

  add_index_entry(f, [domain+'/'+token, listenAddress, listenPort, logintimeout, sslListenPort, sslEnabled, sslHostnameVerificationIgnored, sslhostnameverifier, two_way_ssl, client_certificate_enforced, useservercerts, machine, logfilename,log_file_min_size,log_filecount,log_rotate_logon_startup,log_rotationtype,log_rotationdir,log_number_of_files_limited, tunnelingenabled,log_http_filename,log_http_format,log_http_format_type,log_datasource_filename, classpath, arguments,jsseEnabled,domain,custom_identity,custom_identity_keystore_filename,trust_keystore_file,custom_identity_alias,default_file_store,max_message_size, log_redirect_stderr_to_server, log_redirect_stdout_to_server, restart_max, log_http_file_count,log_http_number_of_files_limited, bea_home, weblogic_plugin_enabled, listenPortEnabled,auto_restart,autokillwfail,server_parameters,frontendhost,frontendhttpport,frontendhttpsport,log_date_pattern, log_stdout_severity, log_log_file_severity, failure_action])

f.close()
report_back_success()
